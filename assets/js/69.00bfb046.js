(window.webpackJsonp=window.webpackJsonp||[]).push([[69],{516:function(s,t,v){"use strict";v.r(t);var a=v(27),_=Object(a.a)({},(function(){var s=this,t=s.$createElement,v=s._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[v("h2",{attrs:{id:"一-css3动画"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一-css3动画"}},[s._v("#")]),s._v(" 一.css3动画")]),s._v(" "),v("p",[s._v("CSS3 动画也被称为补间动画，原因是只需要添加关键帧的位置，其他的未定义的帧会被自动生成")]),s._v(" "),v("p",[s._v("因为我们只设置了几个关键帧的位置，所以在进行动画控制的时候比较困难，不能再半路暂停动画，或者在动画过程中添加一些其他操作，都不大容易")]),s._v(" "),v("p",[s._v("但是 CSS 动画也有很多的好处")]),s._v(" "),v("p",[s._v("浏览器可以对动画进行优化\n帧速不好的浏览器，CSS3 可以自然降级兼容\n代码简单，调优方向固定")]),s._v(" "),v("h2",{attrs:{id:"二-js-动画"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二-js-动画"}},[s._v("#")]),s._v(" 二. JS 动画")]),s._v(" "),v("p",[s._v("首先，JS 动画是逐帧动画，在时间帧上绘制内容，一帧一帧的，所以他的可再造性很高，几乎可以完成任何你想要的动画形式。但是由于逐帧动画的内容不一样，会增加制作的负担，占用比较大的资源空间。")]),s._v(" "),v("p",[s._v("但是它也有很多的优势")]),s._v(" "),v("p",[s._v("细腻的动画\n可控性高\n炫酷高级的动画")]),s._v(" "),v("h2",{attrs:{id:"三-lottie-动画"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三-lottie-动画"}},[s._v("#")]),s._v(" 三. lottie 动画")]),s._v(" "),v("h2",{attrs:{id:"四-svga-动画"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#四-svga-动画"}},[s._v("#")]),s._v(" 四. svga 动画")]),s._v(" "),v("h2",{attrs:{id:"五-各动画对比"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#五-各动画对比"}},[s._v("#")]),s._v(" 五. 各动画对比")]),s._v(" "),v("h3",{attrs:{id:"相比于js动画-css动画更高效"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#相比于js动画-css动画更高效"}},[s._v("#")]),s._v(" 相比于js动画，css动画更高效")]),s._v(" "),v("p",[s._v("「第一点」\n从实现动画的复杂度来看，CSS 动画大多数都是补间动画，而 JS 动画是逐帧动画。当然这里我们不谈论实现的效果")]),s._v(" "),v("p",[s._v("「第二点」\n编码的高效，采用 JS 去实现的动画，无论多简单的动画，都需要去控制整个过程，当然你可能会说可以采用一些库来解决这些问题，但是这些库的实际运行可能要比原生实现的效率要低的多")]),s._v(" "),v("p",[s._v("「第三点」\n性能的高效，在我们前面讲到了回流和重绘，如果我们要操作一个元素向右移动，我们可能需要控制 dom.style.left 属性，每次来「改变元素的位置」，而结合我们所说的，「几何属性」的改变必然会引起「回流」，回流必然引起重绘，可想而知如果我们采用 JS 来实现动画，这个代价有多大，这会造成浏览器在不断的计算页面，从而导致浏览器内存堆积。同时由于 JavaScript 运行在浏览器的主线程中，主线程中还有其他的重要任务在运行，因而可能会受到干扰导致「线程阻塞」，从而「丢帧」")]),s._v(" "),v("p",[s._v("而 CSS 的动画是运行在合成线程中的，不会阻塞主线程，并且在合成线程中完成的动作不会触发回流和重绘")]),s._v(" "),v("p",[s._v("当然还有一个重要的点：JS 动画运行在 CPU，而 CSS 动画运行在 GPU")]),s._v(" "),v("p",[s._v("总的来说， CSS动画的渲染成本小，并且它的执行效率高于 JavaScript 动画\n所以 「只要能用 CSS 实现的动画，就不要采用 JS 去实现」，可以多采用 CSS 预处理器去做更多复杂的动画，比如 SCSS 做的流星雨，随机红包等等动画一样")]),s._v(" "),v("h3",{attrs:{id:"lottie-svga"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#lottie-svga"}},[s._v("#")]),s._v(" lottie/svga")]),s._v(" "),v("p",[s._v("相比于css动画 和 js动画，lottie/svga则对前端更为友好，设计与逻辑分离，让ui专注于设计，前端专注于逻辑。\n一些复杂的比如开宝箱之类的动画，使用lottie/svga能很轻易的实现，但是使用css和js就会显得比较复杂和繁琐了")]),s._v(" "),v("p",[s._v("所以：")]),s._v(" "),v("ul",[v("li",[s._v("简单的交互动画，使用css或者js即可，最好使用css")]),s._v(" "),v("li",[s._v("简单的动图采用webp、比如简单的聊天表情动图（骰子、石头剪刀布等）")]),s._v(" "),v("li",[s._v("lottie适合一些复杂的动画、比如复杂的加载动画、引导动画等、不适合做直播间大礼物特效")]),s._v(" "),v("li",[s._v("直播间复杂的大礼物动可以用效用svga,webp还有apng")]),s._v(" "),v("li",[s._v("MP4不建议做直播间礼物动画防范")])])])}),[],!1,null,null,null);t.default=_.exports}}]);